examples {
  ["application-name"] {
    new {
      applicationName = "example-app"
      resourcesRequests {
        cpu = 500
        memory = 128.mib
      }
      resourcesLimits {
        cpu = 500
        memory = 128.mib
      }
      selectorLabels {
        ["app.kubernetes.io/name"] = "example-app"
      }
      commonLabels {
        ["app"] = "example-app"
        ["app.kubernetes.io/name"] = "example-app"
      }
      containerConfigPath = "/app/config"
      containerSecretPath = "/app/secret"
      configFileName = "application.yaml"
      secretFileName = "application.secrets.yaml"
      image {
        fullName = "example-app:latest"
        repository = null
        name = "example-app"
        tag = "latest"
      }
      config = null
      deployment {
        apiVersion = "apps/v1"
        kind = "Deployment"
        metadata {
          generation = null
          finalizers = null
          resourceVersion = null
          annotations = null
          generateName = null
          deletionTimestamp = null
          labels {
            ["app"] = "example-app"
            ["app.kubernetes.io/name"] = "example-app"
          }
          ownerReferences = null
          selfLink = null
          deletionGracePeriodSeconds = null
          uid = null
          managedFields = null
          creationTimestamp = null
          name = "example-app"
          namespace = null
          clusterName = null
        }
        spec {
          template {
            metadata {
              generation = null
              finalizers = null
              resourceVersion = null
              annotations {}
              generateName = null
              deletionTimestamp = null
              labels {
                ["app"] = "example-app"
                ["app.kubernetes.io/name"] = "example-app"
              }
              ownerReferences = null
              selfLink = null
              deletionGracePeriodSeconds = null
              uid = null
              managedFields = null
              creationTimestamp = null
              name = null
              namespace = null
              clusterName = null
            }
            spec {
              dnsPolicy = null
              nodeName = null
              terminationGracePeriodSeconds = null
              dnsConfig = null
              hostNetwork = null
              readinessGates = null
              serviceAccountName = null
              imagePullSecrets = null
              priorityClassName = null
              hostAliases = null
              securityContext = null
              preemptionPolicy = null
              nodeSelector = null
              hostname = null
              runtimeClassName = null
              tolerations = null
              automountServiceAccountToken = null
              schedulingGates = null
              schedulerName = null
              activeDeadlineSeconds = null
              os = null
              setHostnameAsFQDN = null
              enableServiceLinks = null
              overhead = null
              hostIPC = null
              topologySpreadConstraints = null
              volumes {}
              ephemeralContainers = null
              serviceAccount = null
              priority = null
              restartPolicy = null
              shareProcessNamespace = null
              hostUsers = null
              resourceClaims = null
              subdomain = null
              containers {
                new {
                  volumeDevices = null
                  image = "example-app:latest"
                  imagePullPolicy = "Always"
                  livenessProbe = null
                  stdin = null
                  terminationMessagePolicy = null
                  terminationMessagePath = null
                  workingDir = null
                  resources {
                    claims = null
                    requests {
                      ["cpu"] = "500m"
                      ["memory"] = 128.mib
                    }
                    limits {
                      ["cpu"] = "500m"
                      ["memory"] = 128.mib
                    }
                  }
                  securityContext = null
                  startupProbe = null
                  env = null
                  ports = null
                  restartPolicy = null
                  command = null
                  volumeMounts {}
                  args = null
                  lifecycle = null
                  name = "app"
                  tty = null
                  readinessProbe = null
                  resizePolicy = null
                  stdinOnce = null
                  envFrom = null
                }
              }
              initContainers = null
              affinity {
                nodeAffinity = null
                podAffinity = null
                podAntiAffinity = null
              }
              hostPID = null
            }
          }
          paused = null
          replicas = null
          revisionHistoryLimit = null
          selector {
            matchExpressions = null
            matchLabels {
              ["app.kubernetes.io/name"] = "example-app"
            }
          }
          minReadySeconds = null
          strategy = null
          progressDeadlineSeconds = null
        }
        status = null
      }
      ingress = null
      service = null
      serviceAccount = null
      additional {}
      affinity {
        podAntiAffinityConfig {
          preset = ""
          topologyKey = "kubernetes.io/hostname"
          selectorLabels {
            ["app.kubernetes.io/name"] = "example-app"
          }
        }
        config {
          nodeAffinity = null
          podAffinity = null
          podAntiAffinity = null
        }
      }
      configMap = null
      secret = null
    }
  }
  ["Resources"] {
    new {
      applicationName = "app"
      resourcesRequests {
        cpu = 722
        memory = 122.mib
      }
      resourcesLimits = null
      selectorLabels {
        ["app.kubernetes.io/name"] = "app"
      }
      commonLabels {
        ["app"] = "app"
        ["app.kubernetes.io/name"] = "app"
      }
      containerConfigPath = "/app/config"
      containerSecretPath = "/app/secret"
      configFileName = "application.yaml"
      secretFileName = "application.secrets.yaml"
      image {
        fullName = "app:latest"
        repository = null
        name = "app"
        tag = "latest"
      }
      config = null
      deployment {
        apiVersion = "apps/v1"
        kind = "Deployment"
        metadata {
          generation = null
          finalizers = null
          resourceVersion = null
          annotations = null
          generateName = null
          deletionTimestamp = null
          labels {
            ["app"] = "app"
            ["app.kubernetes.io/name"] = "app"
          }
          ownerReferences = null
          selfLink = null
          deletionGracePeriodSeconds = null
          uid = null
          managedFields = null
          creationTimestamp = null
          name = "app"
          namespace = null
          clusterName = null
        }
        spec {
          template {
            metadata {
              generation = null
              finalizers = null
              resourceVersion = null
              annotations {}
              generateName = null
              deletionTimestamp = null
              labels {
                ["app"] = "app"
                ["app.kubernetes.io/name"] = "app"
              }
              ownerReferences = null
              selfLink = null
              deletionGracePeriodSeconds = null
              uid = null
              managedFields = null
              creationTimestamp = null
              name = null
              namespace = null
              clusterName = null
            }
            spec {
              dnsPolicy = null
              nodeName = null
              terminationGracePeriodSeconds = null
              dnsConfig = null
              hostNetwork = null
              readinessGates = null
              serviceAccountName = null
              imagePullSecrets = null
              priorityClassName = null
              hostAliases = null
              securityContext = null
              preemptionPolicy = null
              nodeSelector = null
              hostname = null
              runtimeClassName = null
              tolerations = null
              automountServiceAccountToken = null
              schedulingGates = null
              schedulerName = null
              activeDeadlineSeconds = null
              os = null
              setHostnameAsFQDN = null
              enableServiceLinks = null
              overhead = null
              hostIPC = null
              topologySpreadConstraints = null
              volumes {}
              ephemeralContainers = null
              serviceAccount = null
              priority = null
              restartPolicy = null
              shareProcessNamespace = null
              hostUsers = null
              resourceClaims = null
              subdomain = null
              containers {
                new {
                  volumeDevices = null
                  image = "app:latest"
                  imagePullPolicy = "Always"
                  livenessProbe = null
                  stdin = null
                  terminationMessagePolicy = null
                  terminationMessagePath = null
                  workingDir = null
                  resources {
                    claims = null
                    requests {
                      ["cpu"] = "722m"
                      ["memory"] = 122.mib
                    }
                    limits = null
                  }
                  securityContext = null
                  startupProbe = null
                  env = null
                  ports = null
                  restartPolicy = null
                  command = null
                  volumeMounts {}
                  args = null
                  lifecycle = null
                  name = "app"
                  tty = null
                  readinessProbe = null
                  resizePolicy = null
                  stdinOnce = null
                  envFrom = null
                }
              }
              initContainers = null
              affinity {
                nodeAffinity = null
                podAffinity = null
                podAntiAffinity = null
              }
              hostPID = null
            }
          }
          paused = null
          replicas = null
          revisionHistoryLimit = null
          selector {
            matchExpressions = null
            matchLabels {
              ["app.kubernetes.io/name"] = "app"
            }
          }
          minReadySeconds = null
          strategy = null
          progressDeadlineSeconds = null
        }
        status = null
      }
      ingress = null
      service = null
      serviceAccount = null
      additional {}
      affinity {
        podAntiAffinityConfig {
          preset = ""
          topologyKey = "kubernetes.io/hostname"
          selectorLabels {
            ["app.kubernetes.io/name"] = "app"
          }
        }
        config {
          nodeAffinity = null
          podAffinity = null
          podAntiAffinity = null
        }
      }
      configMap = null
      secret = null
    }
  }
}
