import "pkl:reflect"

class SecretField extends Annotation {}
class NamedField extends Annotation { name: String }

class ClassElement {
  name: String
  property: reflect.Property
  val: unknown
  originalVal: unknown?
  typed: Boolean
  collection: Boolean = false
}

class SkipValue {}
const SKIP = new SkipValue {}

class SecretRenderer {
  function renderSecrets(value: Typed): Dynamic = render(value, true)
  function renderConfigs(value: Typed): Dynamic = render(value, false)

  function isSecretField(p: reflect.Property): Boolean = p.annotations.any((a) -> a.getClass() == SecretField)

  function namedField(p: reflect.Property, name: String): String =
    p.annotations.findOrNull((a) -> a.getClass() == NamedField)?.getProperty("name") ?? name

  function collectProperties(clazz: reflect.Class): Map<String, reflect.Property> =
    if (clazz.superclass != null)
      collectProperties(clazz.superclass) + clazz.properties
    else clazz.properties

  function isMap(clazz: Class) = 
    let  (clazz = reflect.Class(clazz))
      clazz.isSubclassOf(reflect.Class(Map)) ||
      clazz.isSubclassOf(reflect.Class(Mapping))

  function isList(clazz: Class) = 
    let  (clazz = reflect.Class(clazz))
      clazz.isSubclassOf(reflect.Class(List)) ||
      clazz.isSubclassOf(reflect.Class(Listing))

  function isTypedCollection(val: List | Listing | Map | Mapping) : Boolean = 
    let (list = if (val is Listing) val.toList()
                else if (val is Mapping) val.toMap().values 
                else if (val is Map) val.values 
                else val
    )
    list.firstOrNull is Typed

  function renderMap(value: Map | Mapping, secrets: Boolean): Dynamic | SkipValue =
    let (map = if (value is Mapping) value.toMap() else value)
      let (mapClazz = reflect.Class(value.getClass()))
      let (dyn = map.mapValues((k,v) -> renderIfTyped(v, secrets))
        .filter((k,v) -> if (v is Dynamic) v.toMap().length > 0 else true)
        .toDynamic())
        if (dyn.toMap().length > 0) dyn else SKIP

  function renderList(value: List | Listing, secrets: Boolean): Dynamic | SkipValue =
    let (list = if (value is Listing) value.toList() else value)
    let (dyn = list.map((v) -> renderIfTyped(v, secrets))
      // Filter empty objects
      .filter((v) ->         
        if (v is Dynamic) v.toMap().length > 0 else true
      )
      .filterNonNull().toDynamic())
      if (dyn.toList().length > 0) dyn else SKIP      
  
  function renderIfTyped(value: Any, secrets: Boolean): Any = 
    let (clazz = reflect.Class(value.getClass()))
      if (clazz.isSubclassOf(reflect.Class(Typed))) render(value, secrets)
      else if (isList(value.getClass())) renderList(value, secrets)
      else if (isMap(value.getClass())) renderMap(value, secrets)
      else value

  function render(value: Typed, secrets: Boolean): Dynamic  =
    let (clazz = reflect.Class(value.getClass()))
        collectProperties(clazz)
          .map((n, p) ->
              Pair(n, new ClassElement{
                  name = n
                  property = p
                  val = value.getProperty(n)
                  typed = false
              })
          ).values.map((ce) ->
            if (reflect.Class(ce.val.getClass()).isSubclassOf(reflect.Class(Typed))) new ClassElement{
                    name = ce.name
                    property = ce.property
                    val = render(ce.val, secrets)
                    originalVal = ce.val
                    typed = true
              } else if (isMap(ce.val.getClass())) new ClassElement{
                    name = ce.name
                    property = ce.property
                    val = renderMap(ce.val, secrets)
                    originalVal = ce.val                  
                    typed = false
                    collection = true
              } else if (isList(ce.val.getClass())) new ClassElement{
                    name = ce.name
                    property = ce.property
                    val = renderList(ce.val, secrets)
                    originalVal = ce.val                    
                    typed = false
                    collection = true
              } else ce
           ).toMap((ce) -> namedField(ce.property, ce.name), (ce) ->
              if (ce.typed) 
                if ((ce.val as Dynamic).toMap().values.filterNonNull().isEmpty) SKIP 
                else ce.val
              else 
                if (secrets && isSecretField(ce.property)) ce.val 
                else if (!secrets && !isSecretField(ce.property)) ce.val
                else if (ce.collection && isTypedCollection(ce.originalVal)) ce.val
                else SKIP

        ).toDynamic().toMap().filter((k,v) -> v != SKIP).toDynamic()
}